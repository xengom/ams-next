generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// #region next-auth default model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  portfolios    Portfolio[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
// #endregion

// #region portfolio model
model Portfolio {
  id          Int      @id @default(autoincrement())
  name        String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  assets      Asset[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
// #endregion

// #region assets model
enum AssetType {
  EQUITY
  BOND
  CASH
  COMMODITY
}

model Asset {
  id          Int           @id @default(autoincrement())
  name        String
  symbol      String
  amount      Float
  avgPrice    Float
  tgtRatio    Float
  type        AssetType
  portfolioId Int
  portfolio   Portfolio     @relation(fields: [portfolioId], references: [id])
  latestPriceId  Int         @unique
  latestPrice AssetPrice?  @relation(fields: [latestPriceId], references: [id])
  transactions Transaction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}
model AssetPrice {
  id        Int      @id @default(autoincrement())
  price     Float
  currency  String
  asset     Asset?
}

model Transaction {
  id        Int      @id @default(autoincrement())
  type      String   // BUY or SELL
  amount    Float
  price     Float
  currency  String
  date      DateTime
  assetId   Int
  asset     Asset    @relation(fields: [assetId], references: [id])
  createdAt DateTime @default(now())
}
// #endregion