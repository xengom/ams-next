generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  provider      String?
  providerId    String?
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]     // 포트폴리오
  investments   InvestRecord[]  // 투자 기록
  incomes       IncomeRecord[]  // 수입 기록
  plans         Plan[]          // 지출 계획
  dailyRecords  DailyRecord[]   // 일일 기록
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lastLogin     DateTime        @default(now())

  @@unique([provider, providerId])
}
model Account {
  id                String  @id @default(cuid())
  userId            Int     // Int로 변경
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int      // Int로 변경
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Portfolio {
  id          Int      @id @default(autoincrement())
  name        String
  currency    String?
  assets      Asset[]
  investments InvestRecord[]
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Asset {
  id           Int              @id @default(autoincrement())
  name         String
  value        Float
  category     String
  purchaseDate DateTime
  portfolio    Portfolio        @relation(fields: [portfolioId], references: [id])
  portfolioId  Int
  dividends    DividendRecord[]
  transactions TransactionRecord[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model DividendRecord {
  id        Int      @id @default(autoincrement())
  amount    Float
  date      DateTime
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   Int
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionRecord {
  id        Int      @id @default(autoincrement())
  type      String   // "BUY" or "SELL"
  amount    Float
  quantity  Float
  date      DateTime
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   Int
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DailyRecord {
  id           Int      @id @default(autoincrement())
  date         DateTime
  totalValue   Float    // 전체 자산 가치
  totalPercent Float    // 전체 수익률
  cashValue    Float    // 현금성 자산
  stockValue   Float    // 주식 가치
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, date])
}

model InvestRecord {
  id          Int       @id @default(autoincrement())
  date        DateTime
  amount      Float
  category    String    // "DEPOSIT" or "WITHDRAWAL"
  description String?
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  portfolioId Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model IncomeRecord {
  id          Int      @id @default(autoincrement())
  date        DateTime
  amount      Float
  category    String   // "SALARY", "BONUS", "OTHER"
  description String?
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plan {
  id          Int       @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  targetAmount Float
  category    String    // "INVESTMENT", "SAVING", "SPENDING"
  progress    Float     @default(0)
  description String?
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
} 